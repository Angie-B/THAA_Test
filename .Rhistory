headers.set[[df]] <- headers.set[[df]] %>% filter(!Metabolite.name == "Unknown")
headers.set[[df]] <- headers.set[[df]] %>% select(-one_of(columns.to.drop))
headers.set[[df]] <- headers.set[[df]] %>% rename(Metabolite.Name = Metabolite.name)
}
# Change variable classes -------------------------------------------------
classes.changed <- lapply(names(headers.set), function(x) ChangeClasses(headers.set[[x]]))
names(classes.changed) <- runs
list2env(classes.changed, globalenv())
# Change dataset orientation from wide to long -------------------------------------------------
# Positive
Area.pos <- RearrangeDatasets(Area_HILICPos_Example, parameter = "Area.Value")
Mz.pos   <- RearrangeDatasets(Mz_HILICPos_Example, parameter = "Mz.Value")
RT.pos   <- RearrangeDatasets(RT_HILICPos_Example, parameter = "RT.Value")
SN.pos   <- RearrangeDatasets(SN_HILICPos_Example, parameter = "SN.Value")
# Negative
Area.neg <- RearrangeDatasets(Area_HILICNeg_Example, parameter = "Area.Value")
Mz.neg   <- RearrangeDatasets(Mz_HILICNeg_Example, parameter = "Mz.Value")
RT.neg   <- RearrangeDatasets(RT_HILICNeg_Example, parameter = "RT.Value")
SN.neg   <- RearrangeDatasets(SN_HILICNeg_Example, parameter = "SN.Value")
# Combine to one dataset --------------------------------------------------
combined.pos <- Area.pos %>%
left_join(Mz.pos) %>%
left_join(SN.pos) %>%
left_join(RT.pos) %>%
mutate(Column = "HILICPos") %>%
select(Replicate.Name, Column, Area.Value, Mz.Value, RT.Value, SN.Value, everything())
combined.neg <- Area.neg %>%
left_join(Mz.neg) %>%
left_join(SN.neg) %>%
left_join(RT.neg) %>%
mutate(Column = "HILICNeg") %>%
select(Replicate.Name, Column, Area.Value, Mz.Value, RT.Value, SN.Value, everything())
# Standardize dataset --------------------------------------------------
combined.final <- combined.neg %>%
bind_rows(combined.pos)
combined.final <- StandardizeMetabolites(combined.final)
currentDate <- Sys.Date()
csvFileName <- paste("data_processed/MSDial_combined_", currentDate, ".csv", sep = "")
write.csv(combined.final, csvFileName, row.names = FALSE)
rm(list = ls())
# Quality control script
source("Functions.R")
area.min   <- 1000
RT.flex    <- 0.4
blk.thresh <- 0.3
SN.min     <- 4
pattern = "combined"
# Import QC'd files and clean parameter data ----------------------------
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
combined <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
select(Replicate.Name:Alignment.ID, Metabolite.Name) %>%
mutate(Run.Type = (tolower(str_extract(Replicate.Name, "(?<=_)[^_]+(?=_)"))))
msdial.runtypes <- IdentifyRunTypes(combined)
View(combined)
msdial.runtypes <- IdentifyRunTypes(combined)
IdentifyRunTypes <- function(msdial.file) {
# Identify run typfes and return each unique value present in the Skyline output.
#
# Args
#   msdial.file: Raw output file from Skyline.
#
# Returns
#   run.type: list of labels identifying the run types, isolated from Replicate.Name.
#   Options conssist of samples (smp), pooled (poo), standards (std), and blanks (blk).
#
run.type <- tolower(str_extract(msdial.file$Replicate.Name, "(?<=_)[^_]+(?=_)"))
print(paste("Your runtypes are:", toString(unique(run.type))))
return(run.type)
}
msdial.runtypes <- IdentifyRunTypes(combined)
# Quality control script
source("Functions.R")
area.min   <- 1000
RT.flex    <- 0.4
blk.thresh <- 0.3
SN.min     <- 4
pattern = "combined"
# Import QC'd files and clean parameter data ----------------------------
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
combined <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
select(Replicate.Name:Alignment.ID, Metabolite.Name) %>%
mutate(Run.Type = (tolower(str_extract(Replicate.Name, "(?<=_)[^_]+(?=_)"))))
msdial.runtypes <- IdentifyRunTypes(combined)
RT.table <- combined %>%
filter(Run.Type == "std") %>%
arrange(Metabolite.Name) %>%
group_by(Metabolite.Name) %>%
mutate(RT.min = min(RT.Value, na.rm = TRUE)) %>%
mutate(RT.max = max(RT.Value, na.rm = TRUE)) %>%
select(Metabolite.Name:RT.max) %>%
unique()
blank.table <- combined %>%
filter(Run.Type == "blk") %>%
mutate(Blk.Area = Area.Value) %>%
arrange(Metabolite.Name) %>%
group_by(Metabolite.Name) %>%
mutate(Blk.min = min(Area.Value)) %>%
mutate(Blk.max = max(Area.Value)) %>%
select(Metabolite.Name:Blk.max) %>%
select(-Blk.Area) %>%
unique()
# Create datasets for different flag types --------------------------------
SN.Area.Flags <- combined %>%
arrange(Metabolite.Name) %>%
mutate(SN.Flag       = ifelse(((SN.Value) < SN.min), "SN.Flag", NA)) %>%
mutate(Area.Min.Flag = ifelse((Area.Value < area.min), "Area.Min.Flag", NA))
# Joining datasets---------------------------------------
add.RT.Flag <- SN.Area.Flags %>%
group_by(Metabolite.Name) %>%
left_join(RT.table, by = c("Metabolite.Name", "Run.Type")) %>%
mutate(RT.Flag = ifelse((RT.Value >= (RT.max + RT.flex) | RT.Value <= (RT.min - RT.flex)), "RT.Flag", NA)) %>%
select(-c("RT.max", "RT.min"))
add.blk.Flag <- add.RT.Flag %>%
left_join(blank.table, by = c("Metabolite.Name", "Run.Type")) %>%
mutate(Blank.Flag = ifelse((Area.Value / Blk.max) < blk.thresh, "Blank.Flag", NA)) %>%
select(-c("Blk.min", "Blk.max"))
final.table <- add.blk.Flag %>%
mutate(all.Flags      = paste(SN.Flag, Area.Min.Flag, RT.Flag, Blank.Flag, sep = ", ")) %>%
mutate(all.Flags      = as.character(all.Flags %>% str_remove_all("NA, ") %>% str_remove_all("NA"))) %>%
mutate(all.Flags      = ifelse(all.Flags == "", NA, all.Flags)) %>%
mutate(Area.with.QC   = ifelse(is.na(Area.Min.Flag), Area.Value, NA)) %>%
select(Replicate.Name:Area.Value, Area.with.QC, everything()) %>%
ungroup(Metabolite.Name) %>%
mutate(Metabolite.Name = as.character(Metabolite.Name))
View(final.table)
Description <- c("Hello! Welcome to the world of MSDIAL QE Quality Control! ",
"Minimum area for a real peak: ",
"RT flexibility: ",
"Blank can be this fraction of a sample: ",
"S/N ratio: " ,
"Processed on: ")
Value <- c(NA, area.min, RT.flex, blk.thresh, SN.min, Sys.time())
df <- data.frame(Description, Value)
final.table <- bind_rows(df, final.table)
currentDate <- Sys.Date()
csvFileName <- paste("data_processed/QC_HILIC_Output_", currentDate, ".csv", sep = "")
View(final.table)
# Quality control script
source("Functions.R")
area.min   <- 1000
RT.flex    <- 0.4
blk.thresh <- 0.3
SN.min     <- 4
pattern = "combined"
# Import QC'd files and clean parameter data ----------------------------
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
combined <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
select(Replicate.Name:Alignment.ID, Metabolite.Name) %>%
mutate(Run.Type = (tolower(str_extract(Replicate.Name, "(?<=_)[^_]+(?=_)"))))
msdial.runtypes <- IdentifyRunTypes(combined)
RT.table <- combined %>%
filter(Run.Type == "std") %>%
arrange(Metabolite.Name) %>%
group_by(Metabolite.Name) %>%
mutate(RT.min = min(RT.Value, na.rm = TRUE)) %>%
mutate(RT.max = max(RT.Value, na.rm = TRUE)) %>%
select(Metabolite.Name:RT.max) %>%
unique()
blank.table <- combined %>%
filter(Run.Type == "blk") %>%
mutate(Blk.Area = Area.Value) %>%
arrange(Metabolite.Name) %>%
group_by(Metabolite.Name) %>%
mutate(Blk.min = min(Area.Value)) %>%
mutate(Blk.max = max(Area.Value)) %>%
select(Metabolite.Name:Blk.max) %>%
select(-Blk.Area) %>%
unique()
# Create datasets for different flag types --------------------------------
SN.Area.Flags <- combined %>%
arrange(Metabolite.Name) %>%
mutate(SN.Flag       = ifelse(((SN.Value) < SN.min), "SN.Flag", NA)) %>%
mutate(Area.Min.Flag = ifelse((Area.Value < area.min), "Area.Min.Flag", NA))
# Joining datasets---------------------------------------
add.RT.Flag <- SN.Area.Flags %>%
group_by(Metabolite.Name) %>%
left_join(RT.table, by = c("Metabolite.Name", "Run.Type")) %>%
mutate(RT.Flag = ifelse((RT.Value >= (RT.max + RT.flex) | RT.Value <= (RT.min - RT.flex)), "RT.Flag", NA)) %>%
select(-c("RT.max", "RT.min"))
add.blk.Flag <- add.RT.Flag %>%
left_join(blank.table, by = c("Metabolite.Name", "Run.Type")) %>%
mutate(Blank.Flag = ifelse((Area.Value / Blk.max) < blk.thresh, "Blank.Flag", NA)) %>%
select(-c("Blk.min", "Blk.max"))
# Combine all the flags ---------------------------------------------------
final.table <- add.blk.Flag %>%
mutate(all.Flags      = paste(SN.Flag, Area.Min.Flag, RT.Flag, Blank.Flag, sep = ", ")) %>%
mutate(all.Flags      = as.character(all.Flags %>% str_remove_all("NA, ") %>% str_remove_all("NA"))) %>%
mutate(all.Flags      = ifelse(all.Flags == "", NA, all.Flags)) %>%
mutate(Area.with.QC   = ifelse(is.na(Area.Min.Flag), Area.Value, NA)) %>%
select(Replicate.Name:Area.Value, Area.with.QC, everything()) %>%
ungroup(Metabolite.Name) %>%
mutate(Metabolite.Name = as.character(Metabolite.Name))
# Print to file with comments and a new name ------------------------------
Description <- c("Hello! Welcome to the world of MSDIAL QE Quality Control! ",
"Minimum area for a real peak: ",
"RT flexibility: ",
"Blank can be this fraction of a sample: ",
"S/N ratio: " ,
"Processed on: ")
Value <- c(NA, area.min, RT.flex, blk.thresh, SN.min, Sys.time())
df <- data.frame(Description, Value)
final.table <- bind_rows(df, final.table)
currentDate <- Sys.Date()
csvFileName <- paste("data_processed/QC_HILIC_Output_", currentDate, ".csv", sep = "")
write.csv(final.table, csvFileName, row.names = FALSE)
rm(list = ls())
# Things to Return --------------------------------------------------------
source("Functions.R")
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
Column.Type = "HILIC"
pattern = "QC"
# Things to Return --------------------------------------------------------
source("Functions.R")
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
Column.Type = "HILIC"
pattern = "QC"
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.EddyTransect.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
View(SampKey.all)
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == Column.Type) %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
# Things to Return --------------------------------------------------------
source("Functions.R")
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
Column.Type = "HILIC"
pattern = "QC"
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.EddyTransect.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Internal Standards
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == Column.Type) %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
filter(!str_detect(Replicate.Name, "Blk|Std")) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
View(HILIC.QC)
# QC'd HILIC output
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6)
View(SampKey.all)
print(unique(HILIC.QC$Replicate.Name))
# Things to Return --------------------------------------------------------
source("Functions.R")
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
Column.Type = "HILIC"
pattern = "QC"
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.EddyTransect.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Internal Standards
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == Column.Type) %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
# QC'd HILIC output
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
filter(!str_detect(Replicate.Name, "Blk|Std")) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
HILICS.duplicates <- IdentifyDuplicates(HILIC.QC)
# Things to Return --------------------------------------------------------
source("Functions.R")
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
Column.Type = "HILIC"
pattern = "QC"
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.EddyTransect.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Internal Standards
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == Column.Type) %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
# QC'd HILIC output
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
filter(!str_detect(Replicate.Name, "Blk|Std")) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
HILICS.duplicates <- IdentifyDuplicates(HILIC.QC)
# Things to Return --------------------------------------------------------
source("Functions.R")
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
Column.Type = "HILIC"
pattern = "QC"
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.EddyTransect.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Internal Standards
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == Column.Type) %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
# QC'd HILIC output
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = pattern))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
filter(!str_detect(Replicate.Name, "Blk|Std")) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
HILICS.duplicates <- IdentifyDuplicates(HILIC.QC)
View(HILICS.duplicates)
HILIC.QC <- HILIC.QC %>%
filter(!(Metabolite.name %in% HILICS.duplicates$Metabolite.name & Column == "HILICNeg"))
HILIC.QC <- HILIC.QC %>%
filter(!(Metabolite.Name %in% HILICS.duplicates$Metabolite.Name & Column == "HILICNeg"))
View(HILIC.QC)
HILIC.withIS <- HILIC.QC %>%
filter(Metabolite.Name %in% Internal.Standards$Compound.Name)
HILIC.NoIS <- HILIC.QC %>%
filter(!Metabolite.Name %in% Internal.Standards$Compound.Name)
HILIC.IS.data <- HILIC.withIS %>%
select(Replicate.Name, Metabolite.Name, Area.with.QC) %>%
mutate(Mass.Feature = Metabolite.Name) %>%
select(-Metabolite.Name)
# SHOULD THIS GO AT THE TOP
SampKey <- SampKey.all %>%
filter(Replicate.Name %in% HILIC.IS.data$Replicate.Name) %>%
select(Replicate.Name, Bio.Normalization) %>%
mutate(Mass.Feature = "Inj_vol",
Area.with.QC = Bio.Normalization) %>%
select(Replicate.Name, Area.with.QC, Mass.Feature)
HILIC.IS.data <- rbind(HILIC.IS.data, SampKey) %>%
filter(!str_detect(Replicate.Name, "dda"))
IS.Issues <- HILIC.IS.data[is.na(HILIC.IS.data$Area.with.QC), ]
View(IS.Issues)
IS.Raw.Area.Plot <- ggplot(HILIC.IS.data, aes(x = Replicate.Name, y = Area.with.QC)) +
geom_bar(stat = "identity") +
facet_wrap( ~Mass.Feature, scales = "free_y") +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 10),
legend.position = "top",
strip.text = element_text(size = 10)) +
ggtitle("Internal Standard Raw Areas")
print(IS.Raw.Area.Plot)
HILIC.long  <- HILIC.NoIS %>%
rename(Mass.Feature = Metabolite.Name) %>%
select(Replicate.Name, Mass.Feature, Area.with.QC) %>%
filter(!str_detect(Replicate.Name, "dda")) %>%
arrange(Replicate.Name)
# Test that names are equal across sample sets-----------------------------------------------------------------
test_isdata <- as.data.frame(sort(unique(HILIC.IS.data$Replicate.Name)), stringsAsFactors = FALSE)
test_long <- as.data.frame(sort(unique(HILIC.long$Replicate.Name)), stringsAsFactors = FALSE)
identical(test_isdata[[1]], test_long[[1]])
# Caluclate mean values for each Internal Standard----------------------------------------------------------------
HILIC.IS.means <- HILIC.IS.data %>%
filter(!grepl("_Blk_", Replicate.Name)) %>%
mutate(Mass.Feature = as.factor(Mass.Feature)) %>%
group_by(Mass.Feature) %>%
summarise(Average.Area = mean(as.numeric(Area.with.QC), na.rm = TRUE)) %>%
mutate(Mass.Feature = as.character(Mass.Feature))
HILIC.IS.means[is.na(HILIC.IS.means)] <- NA
# Normalize to each internal Standard----------------------------------------------------------------
HILIC.binded <- rbind(HILIC.IS.data, HILIC.long) %>%
arrange(Mass.Feature)
Split_Dat <- list()
for (i in 1:length(unique(HILIC.IS.data$Mass.Feature))) {
Split_Dat[[i]] <- HILIC.binded %>%
mutate(MIS = unique(HILIC.IS.data$Mass.Feature)[i]) %>%
left_join(HILIC.IS.data %>%
rename(MIS = Mass.Feature, IS_Area = Area.with.QC) %>%
select(MIS, Replicate.Name, IS_Area), by = c("Replicate.Name", "MIS")) %>%
left_join(HILIC.IS.means %>%
rename(MIS = Mass.Feature), by = "MIS") %>%
mutate(Adjusted.Area = Area.with.QC/IS_Area*Average.Area)
}
HILIC.area.norm <- do.call(rbind, Split_Dat) %>%
select(-IS_Area, -Average.Area)
# Standardize name structure to: Date_type_ID_replicate_anythingextra) ----------------------------------------------------------------
HILIC.mydata.new <- HILIC.area.norm %>%
separate(Replicate.Name, c("runDate", "type", "SampID", "replicate"), "_") %>%
mutate(Run.Cmpd = paste(HILIC.area.norm$Replicate.Name, HILIC.area.norm$Mass.Feature))
# Find the B-MIS for each MassFeature----------------------------------------------------------------
# Look only at the Pooled samples, to get a lowest RSD of the pooled possible (RSD_ofPoo),
# then choose which IS reduces the RSD the most (Poo.Picked.IS)
HILIC.poodat <- HILIC.mydata.new %>%
filter(type == "Poo") %>%
group_by(SampID, Mass.Feature, MIS) %>%
summarise(RSD_ofPoo_IND = sd(Adjusted.Area, na.rm = TRUE) / mean(Adjusted.Area, na.rm = TRUE)) %>%
mutate(RSD_ofPoo_IND = ifelse(RSD_ofPoo_IND == "NaN", NA, RSD_ofPoo_IND)) %>%
group_by(Mass.Feature, MIS) %>%
summarise(RSD_ofPoo =  mean(RSD_ofPoo_IND, na.rm = TRUE)) %>%
mutate(RSD_ofPoo = ifelse(RSD_ofPoo == "NaN", NA, RSD_ofPoo))
HILIC.poodat <- HILIC.poodat %>%
left_join(HILIC.poodat %>% group_by(Mass.Feature) %>%
summarise(Poo.Picked.IS = unique(MIS)[which.min(RSD_ofPoo)] [1]))
# Get the original RSD, calculate RSD change, decide if MIS is acceptable----------------------------------------------------------------
HILIC.poodat <- left_join(HILIC.poodat, HILIC.poodat %>%
filter(MIS == "Inj_vol" ) %>%
mutate(Orig_RSD = RSD_ofPoo) %>%
select(-RSD_ofPoo, -MIS)) %>%
mutate(del_RSD = (Orig_RSD - RSD_ofPoo)) %>%
mutate(percent.Change = del_RSD/Orig_RSD) %>%
mutate(accept_MIS = (percent.Change > cut.off & Orig_RSD > cut.off2))
# Change the BMIS to "Inj_vol" if the BMIS is not an acceptable----------------------------------------------------------------
# Adds a column that has the BMIS, not just Poo.Picked.IS
# Changes the FinalBMIS to inject_volume if its no good
HILIC.fixedpoodat <- HILIC.poodat %>%
filter(MIS == Poo.Picked.IS) %>%
mutate(FinalBMIS = ifelse(accept_MIS == "FALSE", "Inj_vol", Poo.Picked.IS)) %>%
mutate(FinalRSD = RSD_ofPoo)
HILIC.newpoodat <- HILIC.poodat %>%
left_join(HILIC.fixedpoodat %>% select(Mass.Feature, FinalBMIS)) %>%
filter(MIS == FinalBMIS) %>%
mutate(FinalRSD = RSD_ofPoo)
Try <- HILIC.newpoodat %>%
filter(FinalBMIS != "Inj_vol")
QuickReport <- print(paste("% of MFs that picked a BMIS",
length(Try$Mass.Feature) / length(HILIC.newpoodat$Mass.Feature),
"RSD improvement cutoff", cut.off,
"RSD minimum cutoff", cut.off2,
sep = " "))
# Evaluate and visualize the results of your BMIS cutoff----------------------------------------------------------------
IS_toISdat <- HILIC.mydata.new %>%
filter(Mass.Feature %in% HILIC.IS.data$Mass.Feature) %>%
select(Mass.Feature, MIS, Adjusted.Area, type) %>%
filter(type == "Smp") %>%
group_by(Mass.Feature, MIS) %>%
summarise(RSD_ofSmp = sd(Adjusted.Area, na.rm = TRUE)/mean(Adjusted.Area, na.rm = TRUE)) %>%
left_join(HILIC.poodat %>% select(Mass.Feature, MIS, RSD_ofPoo, accept_MIS))
injectONlY_toPlot <- IS_toISdat %>%
filter(MIS == "Inj_vol")
ISTest_plot <- ggplot() +
geom_point(dat = IS_toISdat, shape = 21, color = "black", size = 2,aes(x = RSD_ofPoo, y = RSD_ofSmp, fill = accept_MIS)) +
scale_fill_manual(values=c("white","dark gray")) +
geom_point(dat = injectONlY_toPlot, aes(x = RSD_ofPoo, y = RSD_ofSmp), size = 3) +
facet_wrap(~ Mass.Feature)
print(ISTest_plot)
# Return data that is normalized via BMIS----------------------------------------------------------------
## original
HILIC.BMIS_normalizedData <- HILIC.newpoodat %>% select(Mass.Feature, FinalBMIS, Orig_RSD, FinalRSD) %>%
left_join(HILIC.mydata.new, by = "Mass.Feature") %>%
filter(MIS == FinalBMIS) %>%
unique()
currentDate <- Sys.Date()
csvFileName <- paste("data_processed/BMIS_Output_", currentDate, ".csv", sep = "")
View(HILIC.BMIS_normalizedData)
